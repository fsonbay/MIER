var PermissionsTree = (function ($) {
    return function () {
        var $tree;

        function initFiltering() {
            var to = false;
            $('#PermissionTreeFilter').keyup(function () {
                if (to) { clearTimeout(to); }
                to = setTimeout(function () {
                    var v = $('#PermissionTreeFilter').val();
                    if ($tree.jstree(true)) {
                        $tree.jstree(true).search(v);
                    }
                }, 250);
            });
        }

        function init($treeContainer, options) {
            $tree = $treeContainer;
            initialized = false;
            var _jsTreeOptions = {
                "types": {
                    "default": {
                        "icon": "fa fa-folder text-warning"
                    },
                    "file": {
                        "icon": "fa fa-file text-warning"
                    }
                },
                'checkbox': {
                    keep_selected_style: false,
                    three_state: false,
                    cascade: ''
                },
                'search': {
                    'show_only_matches': true
                },
                plugins: ['checkbox', 'types', 'search']
            };

            if (options) {
                if (options.singleSelect && options.singleSelect === true) {
                    $.extend(_jsTreeOptions, {
                        core: {
                            multiple: false
                        }
                    });
                }
            }

            $tree.jstree(_jsTreeOptions);

            if (options && options.singleSelect && options.singleSelect === true) {

            } else {
                $tree.on("changed.jstree", function (e, data) {
                    if (!data.node) {
                        return;
                    }

                    var childrenNodes;

                    if (data.node.state.selected) {
                        selectNodeAndAllParents($tree.jstree('get_parent', data.node));

                        childrenNodes = $.makeArray($tree.jstree('get_node', data.node).children);
                        $tree.jstree('select_node', childrenNodes);

                    } else {
                        childrenNodes = $.makeArray($tree.jstree('get_node', data.node).children);
                        $tree.jstree('deselect_node', childrenNodes);
                    }
                });
            }

            initFiltering();
        };

        function selectNodeAndAllParents(node) {
            $tree.jstree('select_node', node, true);
            var parent = $tree.jstree('get_parent', node);
            if (parent) {
                selectNodeAndAllParents(parent);
            }
        };

        function getSelectedPermissionNames() {
            var permissionNames = [];

            var selectedPermissions = $tree.jstree('get_selected', true);
            for (var i = 0; i < selectedPermissions.length; i++) {
                permissionNames.push(selectedPermissions[i].id);
            }

            return permissionNames;
        };

        return {
            init: init,
            getSelectedPermissionNames: getSelectedPermissionNames
        }
    }
})(jQuery);

(function () {
    app.modals.PermissionTreeModal = function () {
        var _modalManager;
        var _permissionsTree = null;

        var _options = {
            onSelectionDone: function () { }
        };

        this.init = function (modalManager) {
            _modalManager = modalManager;
            _options = $.extend(_options, _modalManager.getOptions().options);

            _permissionsTree = new PermissionsTree()
            _permissionsTree.init(_modalManager.getModal().find('#PermissionFilterTree .permission-tree'), _modalManager.getOptions().options);

            _modalManager.onBeforeClose(function () {
                if (typeof _options.onSelectionDone == "function") {
                    _options.onSelectionDone(_permissionsTree.getSelectedPermissionNames());
                }
            });
        };
    };

    app.modals.PermissionTreeModal.create = function (options) {
        return new app.ModalManager({
            viewUrl: abp.appPath + 'Portal/Common/PermissionTreeModal',
            scriptUrl: abp.appPath + 'view-resources/Areas/Portal/Views/Common/Modals/_PermissionTreeModal.js',
            modalClass: 'PermissionTreeModal',
            options: options,
            removeAllOnCloseBindsAfterModalClose: true
        });
    };
})();
(function () {
    app.modals.CreateOrEditDynamicParameterModal = function () {
        var _modalManager;
        var _dynamicParametersAppServices = abp.services.app.dynamicParameter;

        var _$permissionFilterModal = app.modals.PermissionTreeModal.create({
            singleSelect: true,
            onSelectionDone: function (filteredPermissions) {
                if (filteredPermissions && filteredPermissions.length > 0) {
                    _modalManager.getModal().find('input[name=permission]').val(filteredPermissions[0])
                }
            }
        });

        this.init = function (modalManager) {
            _modalManager = modalManager;
        };

        this.save = function () {
            var dynamicParameter = {
                id: _modalManager.getModal().find("input[name=Id]").val(),
                parameterName: _modalManager.getModal().find("input[name=parameterName]").val(),
                permission: _modalManager.getModal().find("input[name=permission]").val(),
                inputType: _modalManager.getModal().find("select[name=inputType]").val(),
            };
            if (dynamicParameter.parameterName.trim() === "") {
                abp.notify.success(app.localize("XCanNotBeNullOrEmpty", app.localize("ParameterName")))
                return;
            }
            _modalManager.setBusy(true);

            if (dynamicParameter.id) {
                _dynamicParametersAppServices.update(dynamicParameter)
                    .done(function () {
                        abp.notify.info(app.localize('SavedSuccessfully'));
                        _modalManager.close();
                        abp.event.trigger('app.createOrEditDynamicParametersModalSaved');
                    }).always(function () {
                        _modalManager.setBusy(false);
                    });
            } else {
                _dynamicParametersAppServices.add(dynamicParameter)
                    .done(function () {
                        abp.notify.info(app.localize('SavedSuccessfully'));
                        _modalManager.close();
                        abp.event.trigger('app.createOrEditDynamicParametersModalSaved');
                    }).always(function () {
                        _modalManager.setBusy(false);
                    });
            }
        };

        $("#FilterByPermissionsButton").click(function () {
            _$permissionFilterModal.open({ grantedPermissionNames: [] });
        });
    };
})();
(function () {
    $(function () {
        var _table = $('#DynamicParametersTable');
        var _dynamicParametersAppService = abp.services.app.dynamicParameter;

        var _createOrEditModal = new app.ModalManager({
            viewUrl: abp.appPath + 'Portal/DynamicParameter/CreateOrEditModal',
            scriptUrl: abp.appPath + 'view-resources/Areas/Portal/Views/DynamicParameters/_CreateOrEditModal.js',
            modalClass: 'CreateOrEditDynamicParameterModal',
            cssClass: 'scrollable-modal'
        });

        var dataTable = _table.DataTable({
            paging: false,
            serverSide: false,
            processing: false,
            listAction: {
                ajaxFunction: _dynamicParametersAppService.getAll,
            },
            columnDefs: [
                {
                    className: 'control responsive',
                    orderable: false,
                    render: function () {
                        return '';
                    },
                    targets: 0
                },
                {
                    targets: 1,
                    data: null,
                    orderable: false,
                    defaultContent: '',
                    rowAction: {
                        element: $("<button/>")
                            .addClass("btn btn-primary btn-sm")
                            .text(app.localize('Detail'))
                            .click(function () {
                                window.location = "/Portal/DynamicParameter/Detail/" + $(this).data().id;
                            })
                    }
                },
                {
                    targets: 2,
                    data: "parameterName",
                },
                {
                    targets: 3,
                    data: "inputType",
                },
                {
                    targets: 4,
                    data: "permission",
                }
            ]
        });

        $('#CreateNewDynamicParameter').click(function () {
            _createOrEditModal.open();
        });

        $('#GetDynamicParametersButton').click(function (e) {
            e.preventDefault();
            getDynamicParameters();
        });

        function getDynamicParameters() {
            dataTable.ajax.reload();
        }

        abp.event.on('app.createOrEditDynamicParametersModalSaved', function () {
            getDynamicParameters();
        });
    });
})();
