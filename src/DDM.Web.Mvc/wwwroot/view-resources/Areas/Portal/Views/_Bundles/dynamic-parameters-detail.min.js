var PermissionsTree = (function ($) {
    return function () {
        var $tree;

        function initFiltering() {
            var to = false;
            $('#PermissionTreeFilter').keyup(function () {
                if (to) { clearTimeout(to); }
                to = setTimeout(function () {
                    var v = $('#PermissionTreeFilter').val();
                    if ($tree.jstree(true)) {
                        $tree.jstree(true).search(v);
                    }
                }, 250);
            });
        }

        function init($treeContainer, options) {
            $tree = $treeContainer;
            initialized = false;
            var _jsTreeOptions = {
                "types": {
                    "default": {
                        "icon": "fa fa-folder text-warning"
                    },
                    "file": {
                        "icon": "fa fa-file text-warning"
                    }
                },
                'checkbox': {
                    keep_selected_style: false,
                    three_state: false,
                    cascade: ''
                },
                'search': {
                    'show_only_matches': true
                },
                plugins: ['checkbox', 'types', 'search']
            };

            if (options) {
                if (options.singleSelect && options.singleSelect === true) {
                    $.extend(_jsTreeOptions, {
                        core: {
                            multiple: false
                        }
                    });
                }
            }

            $tree.jstree(_jsTreeOptions);

            if (options && options.singleSelect && options.singleSelect === true) {

            } else {
                $tree.on("changed.jstree", function (e, data) {
                    if (!data.node) {
                        return;
                    }

                    var childrenNodes;

                    if (data.node.state.selected) {
                        selectNodeAndAllParents($tree.jstree('get_parent', data.node));

                        childrenNodes = $.makeArray($tree.jstree('get_node', data.node).children);
                        $tree.jstree('select_node', childrenNodes);

                    } else {
                        childrenNodes = $.makeArray($tree.jstree('get_node', data.node).children);
                        $tree.jstree('deselect_node', childrenNodes);
                    }
                });
            }

            initFiltering();
        };

        function selectNodeAndAllParents(node) {
            $tree.jstree('select_node', node, true);
            var parent = $tree.jstree('get_parent', node);
            if (parent) {
                selectNodeAndAllParents(parent);
            }
        };

        function getSelectedPermissionNames() {
            var permissionNames = [];

            var selectedPermissions = $tree.jstree('get_selected', true);
            for (var i = 0; i < selectedPermissions.length; i++) {
                permissionNames.push(selectedPermissions[i].id);
            }

            return permissionNames;
        };

        return {
            init: init,
            getSelectedPermissionNames: getSelectedPermissionNames
        }
    }
})(jQuery);

(function () {
    app.modals.PermissionTreeModal = function () {
        var _modalManager;
        var _permissionsTree = null;

        var _options = {
            onSelectionDone: function () { }
        };

        this.init = function (modalManager) {
            _modalManager = modalManager;
            _options = $.extend(_options, _modalManager.getOptions().options);

            _permissionsTree = new PermissionsTree()
            _permissionsTree.init(_modalManager.getModal().find('#PermissionFilterTree .permission-tree'), _modalManager.getOptions().options);

            _modalManager.onBeforeClose(function () {
                if (typeof _options.onSelectionDone == "function") {
                    _options.onSelectionDone(_permissionsTree.getSelectedPermissionNames());
                }
            });
        };
    };

    app.modals.PermissionTreeModal.create = function (options) {
        return new app.ModalManager({
            viewUrl: abp.appPath + 'Portal/Common/PermissionTreeModal',
            scriptUrl: abp.appPath + 'view-resources/Areas/Portal/Views/Common/Modals/_PermissionTreeModal.js',
            modalClass: 'PermissionTreeModal',
            options: options,
            removeAllOnCloseBindsAfterModalClose: true
        });
    };
})();
(function () {
    app.modals.CreateOrEditDynamicParameterModal = function () {
        var _modalManager;
        var _dynamicParametersAppServices = abp.services.app.dynamicParameter;

        var _$permissionFilterModal = app.modals.PermissionTreeModal.create({
            singleSelect: true,
            onSelectionDone: function (filteredPermissions) {
                if (filteredPermissions && filteredPermissions.length > 0) {
                    _modalManager.getModal().find('input[name=permission]').val(filteredPermissions[0])
                }
            }
        });

        this.init = function (modalManager) {
            _modalManager = modalManager;
        };

        this.save = function () {
            var dynamicParameter = {
                id: _modalManager.getModal().find("input[name=Id]").val(),
                parameterName: _modalManager.getModal().find("input[name=parameterName]").val(),
                permission: _modalManager.getModal().find("input[name=permission]").val(),
                inputType: _modalManager.getModal().find("select[name=inputType]").val(),
            };
            if (dynamicParameter.parameterName.trim() === "") {
                abp.notify.success(app.localize("XCanNotBeNullOrEmpty", app.localize("ParameterName")))
                return;
            }
            _modalManager.setBusy(true);

            if (dynamicParameter.id) {
                _dynamicParametersAppServices.update(dynamicParameter)
                    .done(function () {
                        abp.notify.info(app.localize('SavedSuccessfully'));
                        _modalManager.close();
                        abp.event.trigger('app.createOrEditDynamicParametersModalSaved');
                    }).always(function () {
                        _modalManager.setBusy(false);
                    });
            } else {
                _dynamicParametersAppServices.add(dynamicParameter)
                    .done(function () {
                        abp.notify.info(app.localize('SavedSuccessfully'));
                        _modalManager.close();
                        abp.event.trigger('app.createOrEditDynamicParametersModalSaved');
                    }).always(function () {
                        _modalManager.setBusy(false);
                    });
            }
        };

        $("#FilterByPermissionsButton").click(function () {
            _$permissionFilterModal.open({ grantedPermissionNames: [] });
        });
    };
})();
(function () {
    app.modals.CreateOrEditDynamicParameterValueModal = function () {
        var _modalManager;
        var _dynamicParameterValueAppServices = abp.services.app.dynamicParameterValue;

        this.init = function (modalManager) {
            _modalManager = modalManager;
        };

        this.save = function () {
            var dynamicParameter = {
                id: _modalManager.getModal().find("input[name=id]").val(),
                dynamicParameterId: _modalManager.getModal().find("input[name=dynamicParameterId]").val(),
                value: _modalManager.getModal().find("input[name=dynamicParameterValue]").val(),
            };

            _modalManager.setBusy(true);

            if (dynamicParameter.id) {
                _dynamicParameterValueAppServices.update(dynamicParameter)
                    .done(function () {
                        abp.notify.info(app.localize('SavedSuccessfully'));
                        _modalManager.close();
                        abp.event.trigger('app.createOrEditDynamicParameterValueModalSaved');
                    }).always(function () {
                        _modalManager.setBusy(false);
                    });
            } else {
                _dynamicParameterValueAppServices.add(dynamicParameter)
                    .done(function () {
                        abp.notify.info(app.localize('SavedSuccessfully'));
                        _modalManager.close();
                        abp.event.trigger('app.createOrEditDynamicParameterValueModalSaved');
                    }).always(function () {
                        _modalManager.setBusy(false);
                    });
            }
        };
    };
})();
(function () {
    $(function () {
        var _table = $('#DynamicParameterValuesTable');
        var _dynamicParameterAppService = abp.services.app.dynamicParameter;
        var _dynamicParameterValueAppService = abp.services.app.dynamicParameterValue;
        var _inputTypeManager;
        var dataTable;
        var initialized = false;
        var _permissions = {
            dynamicParameterValue_edit: abp.auth.hasPermission('Pages.Administration.DynamicParameterValue.Edit'),
            dynamicParameterValue_delete: abp.auth.hasPermission('Pages.Administration.DynamicParameterValue.Delete')
        };

        var _createOrEditDynamicParameterModal = new app.ModalManager({
            viewUrl: abp.appPath + 'Portal/DynamicParameter/CreateOrEditModal',
            scriptUrl: abp.appPath + 'view-resources/Areas/Portal/Views/DynamicParameters/_CreateOrEditModal.js',
            modalClass: 'CreateOrEditDynamicParameterModal',
            cssClass: 'scrollable-modal'
        });

        var _createOrEditDynamicParameterValueModal = new app.ModalManager({
            viewUrl: abp.appPath + 'Portal/DynamicParameter/CreateOrEditValueModal',
            scriptUrl: abp.appPath + 'view-resources/Areas/Portal/Views/DynamicParameters/_CreateOrEditValueModal.js',
            modalClass: 'CreateOrEditDynamicParameterValueModal',
            cssClass: 'scrollable-modal'
        });


        function loadValuesDataTable() {
            dataTable = _table.DataTable({
                paging: false,
                serverSide: true,
                processing: false,
                listAction: {
                    ajaxFunction: _dynamicParameterValueAppService.getAllValuesOfDynamicParameter,
                    inputFilter: function () {
                        return {
                            id: dynamicParameterId
                        };
                    }
                },
                columnDefs: [
                    {
                        className: 'control responsive',
                        orderable: false,
                        render: function () {
                            return '';
                        },
                        targets: 0
                    },
                    {
                        targets: 1,
                        data: null,
                        orderable: false,
                        autoWidth: false,
                        defaultContent: '',
                        rowAction: {
                            text: '<i class="fa fa-cog"></i><span class="caret"></span>',
                            items: [{
                                text: app.localize('Edit'),
                                visible: function (data) {
                                    return _permissions.dynamicParameterValue_edit;
                                },
                                action: function (data) {
                                    _createOrEditDynamicParameterValueModal.open({ id: data.record.id });
                                }
                            }, {
                                text: app.localize('Delete'),
                                visible: function (data) {
                                    return _permissions.dynamicParameterValue_delete;
                                },
                                action: function (data) {
                                    deleteValue(data.record.id);
                                }
                            }]
                        }
                    },
                    {
                        targets: 2,
                        orderable: false,
                        data: "value",
                    }
                ]
            });
        }

        function deleteValue(id) {
            abp.message.confirm(
                app.localize('DeleteDynamicParameterValueMessage'),
                app.localize('AreYouSure'),
                function (isConfirmed) {
                    if (isConfirmed) {
                        abp.ui.setBusy();
                        _dynamicParameterValueAppService.delete(id)
                            .done(function () {
                                reloadValues();
                                abp.notify.success(
                                    app.localize('SuccessfullyDeleted')
                                );
                            }).always(function () {
                                abp.ui.clearBusy();
                            });
                    }
                }
            );
        };

        function deleteParameter(id) {
            abp.message.confirm(
                app.localize('DeleteDynamicParameterMessage'),
                app.localize('AreYouSure'),
                function (isConfirmed) {
                    if (isConfirmed) {
                        abp.ui.setBusy();
                        _dynamicParameterAppService.delete(id)
                            .done(function () {
                                window.location.href = "/Portal/DynamicParameter";

                                abp.notify.success(
                                    app.localize('SuccessfullyDeleted')
                                );
                            }).always(function () {
                                abp.ui.clearBusy();
                            });
                    }
                }
            );
        };

        $('#dynamic-parameter-delete').click(function () {
            deleteParameter(dynamicParameterId);
        });

        $('#dynamic-parameter-edit').click(function () {
            _createOrEditDynamicParameterModal.open({ id: dynamicParameterId });
        });

        $('#add-new-dynamic-parameter-value').click(function () {
            _createOrEditDynamicParameterValueModal.open({ dynamicParameterId: dynamicParameterId });
        });

        abp.event.on('app.createOrEditDynamicParametersModalSaved', function () {
            window.location.reload();
        });

        abp.event.on('app.createOrEditDynamicParameterValueModalSaved', function () {
            reloadValues();
        });

        $('#refresh-dynamic-parameter-values-btn').click(function (e) {
            reloadValues();
        });

        function reloadValues() {
            if (initialized && dataTable) {
                dataTable.ajax.reload();
            }
        }

        function manageValueArea() {
            if (!_inputTypeManager) {
                abp.notify.error("Unknown input type");
                return;
            }

            if (typeof _inputTypeManager.hasValues !== 'boolean') {
                abp.notify.error(`Input type manager ${_inputTypeManager} must have "hasValues" field typed boolean`);
                return;
            }

            if (_inputTypeManager.hasValues) {
                $("#portlet-dynamic-parameter-values").removeClass("d-none");
                loadValuesDataTable();
            } else {
                $("#portlet-dynamic-parameter-values").hide();
            }

            initialized = true;
        }

        function initialize() {
            _dynamicParameterAppService.findAllowedInputType(currentInputType)
                .done(function (inputType) {
                    if (inputType) {
                        _inputTypeManager = abp.inputTypeProviders.getInputTypeInstance({ inputType: inputType });
                        manageValueArea();
                    } else {
                        abp.notify.error("Unknown input type");
                    }

                });
        }

        initialize();
    });
})();